#command-line calculator 
import ast
import operator as op
import re

operators = {
    ast.Add: op.add,
    ast.Sub: op.sub,
    ast.Mult: op.mul,
    ast.Div: op.truediv,
    ast.Pow: op.pow
}
def eval_expr(expr):
    """
    Safely evaluate an arithmetic expression using AST.
    """
    tree = ast.parse(expr, mode='eval')
    
    def eval_node(node):
        if isinstance(node, ast.BinOp):
            left = eval_node(node.left)
            right = eval_node(node.right)
            return operators[type(node.op)](left, right)
        elif isinstance(node, ast.UnaryOp):
            operand = eval_node(node.operand)
            if isinstance(node.op, ast.UAdd):
                return +operand
            elif isinstance(node.op, ast.USub):
                return -operand
            else:
                raise TypeError(node)
        elif isinstance(node, ast.Num):
            return node.n
        elif isinstance(node, ast.Expression):
            return eval_node(node.body)
        else:
            raise TypeError(node)
    
    return eval_node(tree.body)

def evaluate_expression(expression):
    expression = re.sub(r'(\d)\s*\(', r'\1*(', expression.replace('Ã—' and 'x', '*'))
    expression = re.sub(r'(\d)\s*(\()', r'\1*\2', expression)
    return eval_expr(expression)

input_expression = input('here:')

result = evaluate_expression(input_expression)

print(f"Answer = {result}")
